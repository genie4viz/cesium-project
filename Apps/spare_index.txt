<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Use correct character set. -->
  <meta charset="utf-8">
  <!-- Tell IE to use the latest, best version. -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <!-- Make the application on mobile take up the full browser screen and disable user scaling. -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
  <title>Hello World!</title>
  <script src="../Build/Cesium/Cesium.js"></script>
  <style>
    @import url(../Build/Cesium/Widgets/widgets.css);

    html,
    body,
    #cesiumContainer {
      width: 100%;
      height: 100%;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }
  </style>
</head>

<body>
  <div id="cesiumContainer"></div>
  <script>
    import Windy from 'windtrend/js/windy/Windy';
    import StormField from 'windtrend/js/storm/StormField';
    import $ from 'jquery';

    Cesium.Ion.defaultAccessToken =
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3ZWE2OGVhOS04MTA4LTQyODktOWRmMi0zNTVkNWUzNDYxMDAiLCJpZCI6NzM1NSwic2NvcGVzIjpbImFzbCIsImFzciIsImFzdyIsImdjIl0sImlhdCI6MTU0OTU1NDQ2N30.-munPjgqJSGuJABSb1-aRdG7Qitmv2W38MPV4MkDT0g';
    var viewer = new Cesium.Viewer('cesiumContainer', {
      terrainProvider: Cesium.createWorldTerrain({
        requestWaterMask: true,
        requestVertexNormals: true
      }),
      imageryProvider: Cesium.createWorldImagery({
        style: Cesium.IonWorldImageryStyle.AERIAL_WITH_LABELS
      }),
      scene3DOnly: true,
      baseLayerPicker: false
    });
    // Enable depth testing so things behind the terrain disappear.
    viewer.scene.globe.depthTestAgainstTerrain = true;
    // // Enable lighting based on sun/moon positions
    // viewer.scene.globe.enableLighting = true;

    // Create an initial camera view
    var initialPosition = new Cesium.Cartesian3.fromDegrees(101.901875, 35.486703, 65000);
    // var initialOrientation = new Cesium.HeadingPitchRoll.fromDegrees(7.1077496389876024807, 31.987223091598949054,
    //   0.025883251314954971306);
    var homeCameraView = {
      destination: initialPosition,
      // orientation: {
      //   heading: initialOrientation.heading,
      //   pitch: initialOrientation.pitch,
      //   roll: initialOrientation.roll
      // }
    };
    // Set the initial view
    viewer.scene.camera.setView(homeCameraView);

    var scene = viewer.scene;

    var startLatitude = 35.486703;
    var startLongitude = 101.901875;
    var startHeight = 10000;
    var endLatitude = 35.486703;
    var endLongitude = 102.10288;
    var endHeight = 15000;

    var model1Matrix = Cesium.Transforms.eastNorthUpToFixedFrame(Cesium.Cartesian3.fromDegrees(startLongitude,
      startLatitude,
      0));
    var model1 = scene.primitives.add(Cesium.Model.fromGltf({
      url: 'gltf/wt.gltf',
      modelMatrix: model1Matrix,
      scale: 200.0
    }));

    var model2Matrix = Cesium.Transforms.eastNorthUpToFixedFrame(Cesium.Cartesian3.fromDegrees(endLongitude,
      endLatitude,
      1000));
    var model2 = scene.primitives.add(Cesium.Model.fromGltf({
      url: 'gltf/wt.gltf',
      modelMatrix: model2Matrix,
      scale: 200.0
    }));

    //draw line
    var result;
    var redLine = viewer.entities.add({
      name: 'Red line on terrain',
      polyline: {
        positions: Cesium.Cartesian3.fromDegreesArrayHeights([startLongitude, startLatitude, startHeight,
          endLongitude, endLatitude, endHeight
        ]),
        width: 5,
        material: Cesium.Color.RED,
        clampToGround: false //ground mapping
      }
    });

    //windy effect    
    reqDynamicWind();

    var windy;

    function reqDynamicWind() {
      $.ajax({
        type: "get",
        url: "windtrend/data/uvwind_d01.json",
        dataType: "json",
        success: function (response) {
          var header = response[0].header;
          createRect(header['lo1'], header['la2'], header['lo2'], header['la1']);
          viewer.camera.setView({
            destination: Cesium.Rectangle.fromDegrees(header['lo1'], header['la2'], header['lo2'], header[
              'la1'])
          });
          windy = new Windy(response, viewer);
          redraw();
        },
        error: function (errorMsg) {
          alert("Error!");
        }
      });
    }

    var timer = null;

    function redraw() {
      timer = setInterval(function () {
        windy.animate();
      }, 100);
    }

    function createRect(west, south, east, north) {
      viewer.scene.primitives.add(new Cesium.Primitive({
        geometryInstances: [
          getRectInstance(Cesium.Rectangle.fromDegrees(west, south, east, north))
        ],
        appearance: new Cesium.PolylineColorAppearance({
          translucent: false
        })
      }));
    }

    function getRectInstance(rect) {
      return new Cesium.GeometryInstance({
        geometry: new Cesium.RectangleOutlineGeometry({
          rectangle: rect
        }),
        attributes: {
          color: Cesium.ColorGeometryInstanceAttribute.fromColor(
            Cesium.Color.RED
          )
        }
      })
    }
    // var layers = viewer.scene.imageryLayers;
    // var blackMarble = layers.addImageryProvider(new Cesium.IonImageryProvider({
    //   assetId: 3812
    // }));

    // blackMarble.alpha = 0.5;

    // blackMarble.brightness = 2.0;

    // layers.addImageryProvider(new Cesium.SingleTileImageryProvider({
    //   url: '../images/Cesium_Logo_overlay.png',
    //   rectangle: Cesium.Rectangle.fromDegrees(-75.0, 28.0, -67.0, 29.75)
    // }));
    // var viewer = new Cesium.Viewer('cesiumContainer', {
    //   terrainProvider: Cesium.createWorldTerrain({
    //     requestWaterMask: true,
    //     requestVertexNormals: true
    //   }),
    //   ArcGisMapServerImageryProvider: new Cesium.ArcGisMapServerImageryProvider({
    //     url: 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer'
    //   })
    // });
  </script>
</body>

</html>